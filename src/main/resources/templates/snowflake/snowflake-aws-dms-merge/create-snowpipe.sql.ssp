<%--
Copyright 2018 phData Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
--%>
#import(io.phdata.streamliner.schemadefiner.model.Snowflake)
<%@ val configuration: io.phdata.streamliner.schemadefiner.model.Configuration %>
<%@ val table: io.phdata.streamliner.schemadefiner.model.SnowflakeTable %>
<%@ val typeMapping: Map[String, Map[String, String]]%>
#{
    val destination = configuration.destination.asInstanceOf[Snowflake]
    val sourceColumnStr = table.sourceColumnConversion(typeMapping)
}#
USE DATABASE ${destination.stagingDatabase.name};

USE SCHEMA ${destination.stagingDatabase.schema};

CREATE PIPE IF NOT EXISTS ${table.destinationName}_pipe
    AUTO_INGEST = true
#if (destination.pipeErrorIntegration != null && destination.pipeErrorIntegration.length>0)
    ERROR_INTEGRATION = '${destination.pipeErrorIntegration}'
#end
#if (destination.snsTopic != null && destination.snsTopic.length>0)
    AWS_SNS_TOPIC = '${destination.snsTopic}'
#end
    AS
        COPY INTO ${table.destinationName}_stg (${table.columnList(null)}, dms_operation, dms_ts)
            FROM ( SELECT ${unescape(sourceColumnStr)}, $1:Op::STRING, $1:ts::TIMESTAMP_LTZ
                   FROM @${configuration.name}_stage/${table.sourceName})
        FILE_FORMAT = ( TYPE = PARQUET);
