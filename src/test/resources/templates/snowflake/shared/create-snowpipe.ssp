#import(io.phdata.streamliner.schemadefiner.model.Snowflake)
<%@ val configuration: io.phdata.streamliner.schemadefiner.model.Configuration %>
<%@ val table: io.phdata.streamliner.schemadefiner.model.SnowflakeTable %>
<%@ val typeMapping: Map[String, Map[String, String]]%>
#{
    val destination = configuration.destination.asInstanceOf[Snowflake]
    val sourceColumnStr = table.sourceColumnConversion(typeMapping)
}#
USE DATABASE ${destination.stagingDatabase.name};

USE SCHEMA ${destination.stagingDatabase.schema};

CREATE PIPE IF NOT EXISTS ${table.destinationName}_pipe
    AUTO_INGEST = true
#if (destination.pipeErrorIntegration != null && destination.pipeErrorIntegration.length>0)
    ERROR_INTEGRATION = '${destination.pipeErrorIntegration}'
#end
#if (destination.snsTopic != null && destination.snsTopic.length>0)
    AWS_SNS_TOPIC = '${destination.snsTopic}'
#end
    AS
        COPY INTO ${table.destinationName} (${unescape(table.columnList(null))})
            FROM ( SELECT ${unescape(sourceColumnStr)}
                FROM @${configuration.name}_stage/${table.sourceName})
        FILE_FORMAT = ( TYPE = PARQUET);
